// Generated by CoffeeScript 1.9.3

/*! Actile 0.0.2 //// MIT Licence //// http://actile.richplastow.com/ */

(function() {
  var Main, Tile, zz, ª, ªA, ªB, ªC, ªE, ªF, ªN, ªO, ªR, ªS, ªU, ªV, ªX, ªex, ªhas, ªredefine, ªtype, ªuid;

  ªC = 'Actile';

  ªV = '0.0.2';

  ªA = 'array';

  ªB = 'boolean';

  ªE = 'error';

  ªF = 'function';

  ªN = 'number';

  ªO = 'object';

  ªR = 'regexp';

  ªS = 'string';

  ªU = 'undefined';

  ªX = 'null';

  ª = console.log.bind(console);

  ªex = function(x, a, b) {
    var pos;
    if (-1 === (pos = a.indexOf(x))) {
      return x;
    } else {
      return b.charAt(pos);
    }
  };

  ªhas = function(h, n, t, f) {
    if (t == null) {
      t = true;
    }
    if (f == null) {
      f = false;
    }
    if (-1 !== h.indexOf(n)) {
      return t;
    } else {
      return f;
    }
  };

  ªtype = function(x) {
    return {}.toString.call(x).match(/\s([a-z|A-Z]+)/)[1].toLowerCase();
  };

  ªuid = function(p) {
    return p + '_' + (Math.random() + '1111111111111111').slice(2, 18);
  };

  ªredefine = function(obj, name, value, kind) {
    switch (kind) {
      case 'constant':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: true
        });
      case 'private':
        return Object.defineProperty(obj, name, {
          value: value,
          enumerable: false
        });
    }
  };

  Main = (function() {
    Main.prototype.C = ªC;

    Main.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Main(config) {
      var i, l, tile;
      if (config == null) {
        config = {};
      }
      if (ªO !== typeof config) {
        throw Error("`config` is type '" + (ªtype(config)) + "' not 'object'");
      }
      if (ªN === ªtype(config.tiles)) {
        this.tiles = Array(config.tiles);
      } else if (ªA !== ªtype(config.tiles)) {
        throw Error("`config.tiles` is type '" + (ªtype(config.tiles)) + "' not 'array|number'");
      } else {
        this.tiles = config.tiles;
      }
      i = 0;
      l = this.tiles.length;
      while (i < l) {
        tile = this.tiles[i];
        if (!(tile instanceof Tile)) {
          if (ªO === ªtype(tile)) {
            this.tiles[i] = new Tile(tile);
          } else if (ªU === ªtype(tile)) {
            this.tiles[i] = new Tile;
          } else {
            throw Error("`config.tiles` contains type '" + (ªtype(tile)) + "'");
          }
        }
        i++;
      }
    }

    Main.prototype.yy = function(xx) {};

    return Main;

  })();

  zz = function(xx) {};

  Tile = (function() {
    Tile.prototype.C = 'Tile';

    Tile.prototype.toString = function() {
      return "[object " + this.C + "]";
    };

    function Tile(config) {
      if (config == null) {
        config = {};
      }
      if (ªU === ªtype(config.ar)) {
        this.ar = 1;
      } else if (ªN !== ªtype(config.ar)) {
        throw Error("`ar` is '" + (ªtype(config.ar)) + "' not 'number'");
      } else {
        this.ar = config.ar;
      }
    }

    Tile.prototype.yy = function(xx) {};

    return Tile;

  })();

  zz = function(xx) {};

  if (ªF === typeof define && define.amd) {
    define(function() {
      return Main;
    });
  } else if (ªO === typeof module && module && module.exports) {
    module.exports = Main;
  } else {
    this[ªC] = Main;
  }

}).call(this);
